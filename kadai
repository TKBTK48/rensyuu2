/*
 * StringCheck.cs
 *   作成	IT-College
 *------------------------------------------------------------
 * Copyright(c) Rhizome Inc. All Rights Reserved.
 */
/*
 * ------------------------------<< 演習課題 >>----------------------------------
 * 下記のプログラムは、とある短文投稿サイトの投稿部分のプログラムです。
 * しかし、下記のプログラムをチェックしたところ、以下のようなバグが確認されました。
 *
 * ①：何も入力していなかったとしても投稿できてしまう
 * ②：何文字でも投稿できてしまう
 *
 * それを踏まえて、以下のような仕様へ変更することとなった。
 * その対応を行ってください。
 *
 * a：何も入力していなかった場合は、「何も入力されていません」と表示させ再度入力待ち状態にする。
 * 		※「いまなにしてる？」という文言も再度表示させる。
 * b：141文字以上の場合、「投稿文が長すぎます」と表示させ再度入力待ち状態にする。
 * c：スペースのみで入力されている場合、「何も入力されていません」と表示させ再度入力待ち状態にする。
 * d：両端にスペースがあった場合は、そのスペースを除去する。
 *
 * ------------------------------------------------------------------------------
 */

using System;
using System.IO;
/**
* 単文投稿を行うプログラムです。
* @author rhizome
*
*/
public class StringCheck
{

    /**
	 * 単文投稿を行うプログラムのメインです。
	 * @param args
	 */
    public static void Main(string[] args)
    {

        while (true)
        {
            Console.WriteLine("いまなにしてる？");
            string str = InputString();
            str = str.Trim();
            int l = str.Length;
            if (l == 0)
            {
                Console.WriteLine("何も入力されていません");
                continue;
            }
            else if (l >= 141)
            {
                Console.WriteLine("投稿文が長すぎます");
                continue;
            }

            else
            {
                Console.WriteLine();
                Console.WriteLine("↓↓↓↓↓↓　投稿されました　↓↓↓↓↓↓");
                Console.WriteLine(str);
                Program obj = new Program();
                obj.Log();
                break;
            }
        }
    }

    /**
	 * 単文を入力させるメソッドです。
	 * @return
	 */
    public static string InputString()
    {
        string str = Console.ReadLine();
        return str;
    }

    //ログのメソッドです。
    public void Log()
    {
        Console.WriteLine("test");
        //string str = InputString();
        //DateTime dt = DateTime.Now;
        //string dtnow = dt.ToString();
        ////File.WriteAllText($@"C:\work\実行例（挑戦）\Log\{dtnow}log.txt", $"{dtnow} {str}");

        ////全ファイル名取得
        //try
        //{
        //    string[] files = System.IO.Directory.GetFiles(@"C:\work\実行例（挑戦）\Log", " *.text", System.IO.SearchOption.TopDirectoryOnly);

        //    string newestFileName = string.Empty;
        //    System.DateTime updateTime = System.DateTime.MinValue;
        //    foreach (string file in files)
        //    {
        //        // それぞれのファイルの更新日付を取得
        //        System.IO.FileInfo fi = new System.IO.FileInfo(file);
        //        // 更新日付が最新なら更新日付とファイル名を保存する
        //        if (fi.LastWriteTime > updateTime)
        //        {
        //            updateTime = fi.LastWriteTime;
        //            newestFileName = file;
        //        }
        //    }

        //    //newestFileNameが最新ファイル

        //    string logText = File.ReadAllText($@"C:\work\実行例（挑戦）\Log\{newestFileName}.txt");
        //    string before = logText;
        //    string after = logText.Replace("\n", "");
        //    int ret = before.Length - after.Length;

        //    if (ret > 100)
        //    {
        //        File.AppendAllText($@"C:\work\実行例（挑戦）\Log\{dtnow}log.txt", $"{dtnow} {str}" + Environment.NewLine);
        //    }
        //    else
        //    {
        //        File.AppendAllText($@"C:\work\実行例（挑戦）\Log\{newestFileName}.txt", $"{dtnow} {str}" + Environment.NewLine);
        //    }
        //}
        //catch
        //{
        //    string path = @"C:\work\実行例（挑戦）\Log\";
        //    DirectoryInfo di = new DirectoryInfo(path);
        //    File.AppendAllText($@"C:\work\実行例（挑戦）\Log\{dtnow}log.txt", $"{dtnow} {str}" + Environment.NewLine);
        //}

    }

}
